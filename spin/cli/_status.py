"""Check the status of a machine"""

from __future__ import annotations

import pathlib
from dataclasses import dataclass
from ipaddress import IPv4Address, IPv6Address
from typing import Optional

from spin.cli._utils import load
from spin.errors import NotFound
from spin.machine.machine import Machine, has_backend
from spin.utils import constants, ui


@dataclass
class MachineStatus:
    """Contains the --actual-- status of a machine"""

    machine: Machine
    """The machine associated with this status"""

    state: constants.MACHINE_STATE_LITERAL
    """Current (detected) machine state"""

    ip: Optional[IPv4Address | IPv6Address] = None


def single_status(machine: Machine) -> MachineStatus:
    """Check the status of a machine.

    Args:
        machine: The machine to generate status.

    Returns:
        A :py:class:`MachineStatus` object
    """
    state: constants.MACHINE_STATE_LITERAL = "UNKNOWN"
    ip: None | IPv4Address | IPv6Address = None
    state = machine.state

    if has_backend(machine):
        ip = machine.backend.main_ip

    return MachineStatus(machine=machine, state=state, ip=ip)


def status(machine: str | pathlib.Path | Machine) -> list[MachineStatus]:
    """Check the status of a machine.

    The machine is searched with :py:func:`spin.cli.load.load`.

    Args:
        machine: The machine to start, see above for possible types and
            values.

    Returns:
        A :py:class:`MachineStatus` object

    Raises:
        ValueError: If the machine is not running
        ValueError: If the machine cannot be found in the backend.
    """
    if not isinstance(machine, Machine):
        try:
            machines = load(machine, disable_definition=True)
            if machines is None:
                raise ValueError("Could not found machine")
        except NotFound as e:
            ui.instance().error(f"Machine {e.search} could not be found")
            exit(1)
    else:
        machines = [machine]

    return [single_status(m) for m in machines]


def print_status(machine: str | pathlib.Path | Machine) -> int:
    """Print the status generated by :py:func:`status`

    Args:
        machine: The machine to print. Can be name, UUID or a
            :py:class:`Machine` object.

    Raises:
        Same as :py:func:`status`.
    """
    statuses = status(machine)
    for mstatus in statuses:
        machine = mstatus.machine

        state = mstatus.state.capitalize()
        name = machine.name or "(No name)"
        uuid = machine.uuid or "(No UUID)"

        print(f"{name} | {uuid}", end="\n\n")
        print(f"Status: {state}")
        print(f"Folder: {machine.folder}")
        print(f"IP:     {mstatus.ip}")
    return 0
